@{
    ViewData["Title"] = "Product Intelligence";
}

<div class="dashboard-container">
    <!-- Header -->
    <div class="mb-4">
        <h1 class="dashboard-title">üì¶ Product Intelligence</h1>
        <p class="text-muted">Comprehensive product performance and sales intelligence</p>
    </div>

    <!-- Filters -->
    <div class="dashboard-card mb-4">
        <div class="row g-3 align-items-end">
            <div class="col-lg-3">
                <label class="form-label fw-semibold">Date Range</label>
                <div class="d-flex gap-2">
                    <input type="date" id="startDate" class="form-control form-control-sm">
                    <input type="date" id="endDate" class="form-control form-control-sm">
                </div>
            </div>
            <div class="col-lg-2">
                <label class="form-label fw-semibold">Stores</label>
                <select id="storeSelect" class="form-select form-select-sm" multiple size="3">
                    <!-- Dynamic content -->
                </select>
            </div>
            <div class="col-lg-2">
                <label class="form-label fw-semibold">Vendors</label>
                <select id="vendorSelect" class="form-select form-select-sm" multiple size="3">
                    <!-- Dynamic content -->
                </select>
            </div>
            <div class="col-lg-2">
                <label class="form-label fw-semibold">Min Quantity</label>
                <input type="number" id="minQuantity" class="form-control form-control-sm" value="1" min="1">
            </div>
            <div class="col-lg-3">
                <button id="analyzeProducts" class="btn btn-primary btn-sm w-100">
                    <i class="fluent-icon">üîç</i> Analyze Products
                </button>
            </div>
        </div>
    </div>

    <!-- Error Alert -->
    <div id="errorAlert" class="alert alert-danger" style="display: none;">
        <span id="errorMessage"></span>
    </div>

    <!-- Summary Metrics -->
    <div id="summaryCards" class="row g-4 mb-4" style="display: none;">
        <div class="col-lg-3 col-md-6">
            <div class="metric-card">
                <div class="metric-icon">üì¶</div>
                <div class="metric-content">
                    <div class="metric-label">Total Products</div>
                    <div class="metric-value" id="totalProducts">0</div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="metric-card">
                <div class="metric-icon">üí∞</div>
                <div class="metric-content">
                    <div class="metric-label">Total Revenue</div>
                    <div class="metric-value" id="totalRevenue">$0</div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="metric-card">
                <div class="metric-icon">üìä</div>
                <div class="metric-content">
                    <div class="metric-label">Total Units</div>
                    <div class="metric-value" id="totalUnits">0</div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="metric-card">
                <div class="metric-icon">üìà</div>
                <div class="metric-content">
                    <div class="metric-label">Avg Product Revenue</div>
                    <div class="metric-value" id="avgProductRevenue">$0</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading State -->
    <div id="loadingState" class="dashboard-card text-center py-5" style="display: none;">
        <div class="loading-spinner mb-3"></div>
        <div class="text-muted">Loading product intelligence...</div>
    </div>

    <!-- Brand Performance Chart -->
    <div id="brandChart" class="dashboard-card mb-4" style="display: none;">
        <h3 class="chart-title">Top Brand Performance</h3>
        <canvas id="brandPerformanceChart" width="100%" height="400"></canvas>
    </div>

    <!-- Top Products Table -->
    <div id="topProductsTable" class="dashboard-card mb-4" style="display: none;">
        <h3 class="chart-title">üèÜ Top Products by Revenue</h3>
        <div class="table-responsive">
            <table class="table table-hover">
                <thead class="table-light">
                    <tr>
                        <th>Rank</th>
                        <th>SKU</th>
                        <th>Product Name</th>
                        <th>Vendor</th>
                        <th>Revenue</th>
                        <th>Units Sold</th>
                        <th>Avg Price</th>
                        <th>Orders</th>
                    </tr>
                </thead>
                <tbody id="topProductsTableBody"></tbody>
            </table>
        </div>
    </div>

    <!-- Brand Performance Table -->
    <div id="brandPerformanceTable" class="dashboard-card" style="display: none;">
        <h3 class="chart-title">üè∑Ô∏è Brand Performance Analysis</h3>
        <div class="table-responsive">
            <table class="table table-hover">
                <thead class="table-light">
                    <tr>
                        <th>Rank</th>
                        <th>Vendor/Brand</th>
                        <th>Revenue</th>
                        <th>Units Sold</th>
                        <th>Product Count</th>
                        <th>Avg Price</th>
                        <th>Total Orders</th>
                    </tr>
                </thead>
                <tbody id="brandPerformanceTableBody"></tbody>
            </table>
        </div>
    </div>

    <!-- Help Text -->
    <div id="helpText" class="dashboard-card text-center py-5">
        <div style="font-size: 3rem; margin-bottom: 1rem;">üì¶</div>
        <h3 class="mb-3">Select Date Range to Analyze Product Performance</h3>
        <p class="text-muted">Choose a date range and filters to view detailed product intelligence and performance metrics</p>
    </div>
</div>

<style>
.dashboard-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
}

.dashboard-card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    padding: 1.5rem;
    border: 1px solid #e5e7eb;
}

.dashboard-title {
    font-size: 1.75rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.5rem;
}

.metric-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    border: 1px solid #e5e7eb;
    display: flex;
    align-items: center;
    gap: 1rem;
    height: 100%;
}

.metric-icon {
    font-size: 2rem;
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 12px;
    color: white;
    flex-shrink: 0;
}

.metric-content {
    flex: 1;
}

.metric-label {
    font-size: 0.875rem;
    color: #6b7280;
    font-weight: 500;
    margin-bottom: 0.25rem;
}

.metric-value {
    font-size: 1.5rem;
    font-weight: 600;
    color: #1f2937;
}

.chart-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 1.5rem;
    text-align: center;
}

.loading-spinner {
    width: 2rem;
    height: 2rem;
    border: 2px solid #e5e7eb;
    border-radius: 50%;
    border-top-color: #0078d4;
    animation: spin 1s ease-in-out infinite;
    margin: 0 auto;
}

@@keyframes spin {
    to { transform: rotate(360deg); }
}

.fluent-icon {
    margin-right: 0.25rem;
}

.table th {
    font-weight: 600;
    font-size: 0.875rem;
    color: #6b7280;
    text-transform: uppercase;
    letter-spacing: 0.05em;
}

.rank-1 { background-color: #fff9c4; }
.rank-2 { background-color: #f3f4f6; }  
.rank-3 { background-color: #fed7aa; }

select[multiple] {
    height: auto !important;
}
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
let brandChart = null;
let productsData = null;

document.addEventListener('DOMContentLoaded', function() {
    // Set default date range (last 7 days)
    const today = new Date();
    const lastWeek = new Date(today);
    lastWeek.setDate(lastWeek.getDate() - 7);
    
    document.getElementById('startDate').value = lastWeek.toISOString().split('T')[0];
    document.getElementById('endDate').value = today.toISOString().split('T')[0];
    
    // Load initial data
    fetchInitialData();
    
    // Event listeners
    document.getElementById('analyzeProducts').addEventListener('click', fetchProductsData);
});

async function fetchInitialData() {
    try {
        const response = await fetch('/dev/api/Products/initial');
        const data = await response.json();
        
        if (data.success) {
            populateStoreOptions(data.availableStores);
            populateVendorOptions(data.availableVendors);
        }
    } catch (error) {
        console.error('Error fetching initial data:', error);
    }
}

function populateStoreOptions(stores) {
    const storeSelect = document.getElementById('storeSelect');
    storeSelect.innerHTML = '';
    
    stores.forEach(store => {
        const option = document.createElement('option');
        option.value = store;
        option.textContent = store;
        storeSelect.appendChild(option);
    });
    
    // Select first 3 stores by default
    for (let i = 0; i < Math.min(3, stores.length); i++) {
        storeSelect.options[i].selected = true;
    }
}

function populateVendorOptions(vendors) {
    const vendorSelect = document.getElementById('vendorSelect');
    vendorSelect.innerHTML = '';
    
    vendors.forEach(vendor => {
        const option = document.createElement('option');
        option.value = vendor;
        option.textContent = vendor;
        vendorSelect.appendChild(option);
    });
    
    // Select first 5 vendors by default
    for (let i = 0; i < Math.min(5, vendors.length); i++) {
        vendorSelect.options[i].selected = true;
    }
}

async function fetchProductsData() {
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    const selectedStores = Array.from(document.getElementById('storeSelect').selectedOptions).map(opt => opt.value);
    const selectedVendors = Array.from(document.getElementById('vendorSelect').selectedOptions).map(opt => opt.value);
    const minQuantity = parseInt(document.getElementById('minQuantity').value) || 1;
    
    if (!startDate || !endDate) {
        showError('Please select both start and end dates');
        return;
    }
    
    try {
        showLoading(true);
        hideError();
        hideHelpText();
        
        const params = new URLSearchParams({
            startDate: startDate,
            endDate: endDate,
            stores: selectedStores.join(','),
            vendors: selectedVendors.join(','),
            minQuantity: minQuantity.toString()
        });
        
        const response = await fetch(`/dev/api/Products?${params}`);
        const data = await response.json();
        
        if (data.success) {
            productsData = data;
            updateSummaryCards(data.summary);
            updateBrandChart(data.brandPerformance);
            updateTopProductsTable(data.topProducts);
            updateBrandPerformanceTable(data.brandPerformance);
            hideError();
        } else {
            showError(data.error || 'Failed to fetch products data');
        }
    } catch (error) {
        console.error('Error fetching products data:', error);
        showError('Error connecting to server');
    } finally {
        showLoading(false);
    }
}

function updateSummaryCards(summary) {
    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount);
    };
    
    document.getElementById('totalProducts').textContent = summary.totalProducts.toLocaleString();
    document.getElementById('totalRevenue').textContent = formatCurrency(summary.totalRevenue);
    document.getElementById('totalUnits').textContent = summary.totalUnits.toLocaleString();
    document.getElementById('avgProductRevenue').textContent = formatCurrency(summary.avgProductRevenue);
    
    document.getElementById('summaryCards').style.display = 'block';
}

function updateBrandChart(brandData) {
    const ctx = document.getElementById('brandPerformanceChart').getContext('2d');
    
    if (brandChart) {
        brandChart.destroy();
    }
    
    const top15Brands = brandData.slice(0, 15);
    
    brandChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: top15Brands.map(b => b.vendor),
            datasets: [{
                label: 'Revenue',
                data: top15Brands.map(b => b.totalRevenue),
                backgroundColor: 'rgba(59, 130, 246, 0.6)',
                borderColor: '#3b82f6',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return '$' + value.toLocaleString();
                        }
                    }
                },
                x: {
                    ticks: {
                        maxRotation: 45
                    }
                }
            }
        }
    });
    
    document.getElementById('brandChart').style.display = 'block';
}

function updateTopProductsTable(products) {
    const tbody = document.getElementById('topProductsTableBody');
    tbody.innerHTML = '';
    
    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount);
    };
    
    products.slice(0, 50).forEach((product, index) => {
        const row = document.createElement('tr');
        row.className = `rank-${Math.min(index + 1, 3)}`;
        
        row.innerHTML = `
            <td class="fw-bold">${index + 1}</td>
            <td class="font-monospace small">${product.sku}</td>
            <td>${product.productName}</td>
            <td>${product.vendor}</td>
            <td class="fw-semibold text-success">${formatCurrency(product.totalRevenue)}</td>
            <td>${product.totalQuantity.toLocaleString()}</td>
            <td>${formatCurrency(product.avgPrice)}</td>
            <td>${product.orderCount}</td>
        `;
        
        tbody.appendChild(row);
    });
    
    document.getElementById('topProductsTable').style.display = 'block';
}

function updateBrandPerformanceTable(brandData) {
    const tbody = document.getElementById('brandPerformanceTableBody');
    tbody.innerHTML = '';
    
    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount);
    };
    
    brandData.slice(0, 30).forEach((brand, index) => {
        const row = document.createElement('tr');
        row.className = `rank-${Math.min(index + 1, 3)}`;
        
        row.innerHTML = `
            <td class="fw-bold">${index + 1}</td>
            <td class="fw-medium">${brand.vendor}</td>
            <td class="fw-semibold text-success">${formatCurrency(brand.totalRevenue)}</td>
            <td>${brand.totalQuantity.toLocaleString()}</td>
            <td>${brand.productCount}</td>
            <td>${formatCurrency(brand.avgPrice)}</td>
            <td>${brand.totalOrders}</td>
        `;
        
        tbody.appendChild(row);
    });
    
    document.getElementById('brandPerformanceTable').style.display = 'block';
}

function showLoading(show) {
    document.getElementById('loadingState').style.display = show ? 'block' : 'none';
    
    if (!show && productsData) {
        document.getElementById('summaryCards').style.display = 'block';
        document.getElementById('brandChart').style.display = 'block';
        document.getElementById('topProductsTable').style.display = 'block';
        document.getElementById('brandPerformanceTable').style.display = 'block';
    }
}

function showError(message) {
    const errorAlert = document.getElementById('errorAlert');
    const errorMessage = document.getElementById('errorMessage');
    
    errorMessage.textContent = message;
    errorAlert.style.display = 'block';
}

function hideError() {
    const errorAlert = document.getElementById('errorAlert');
    errorAlert.style.display = 'none';
}

function hideHelpText() {
    document.getElementById('helpText').style.display = 'none';
}
</script>