@{
    ViewData["Title"] = "Budget Dashboard";
}

<div class="dashboard-container">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-start mb-4">
        <div>
            <h1 class="dashboard-title">ðŸ’° Fit2Run Budget</h1>
            <p class="text-muted">Track budget vs actual performance across all locations</p>
        </div>
        
        <!-- Filters -->
        <div class="d-flex gap-3">
            <div style="width: 200px;">
                <label class="form-label small fw-semibold text-muted mb-1">Time Period</label>
                <select id="periodSelect" class="form-select form-select-sm">
                    <option value="lastweek">Last Week (Sun-Mon)</option>
                    <option value="last4weeks" selected>Last 4 Weeks</option>
                    <option value="lastmonth">Last Month (1-31)</option>
                </select>
            </div>
            <div style="width: 200px;">
                <label class="form-label small fw-semibold text-muted mb-1">Location</label>
                <select id="locationSelect" class="form-select form-select-sm">
                    <option value="all">All Locations</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Summary Metrics -->
    <div class="row g-4 mb-4">
        <div class="col-lg">
            <div class="metric-card">
                <div class="metric-icon">ðŸ“…</div>
                <div class="metric-content">
                    <div class="metric-label">2024 Sales</div>
                    <div class="metric-value" id="sales2024">$0</div>
                </div>
            </div>
        </div>
        <div class="col-lg">
            <div class="metric-card">
                <div class="metric-icon">ðŸŽ¯</div>
                <div class="metric-content">
                    <div class="metric-label">2025 Plan</div>
                    <div class="metric-value" id="plan2025">$0</div>
                </div>
            </div>
        </div>
        <div class="col-lg">
            <div class="metric-card">
                <div class="metric-icon">ðŸ“Š</div>
                <div class="metric-content">
                    <div class="metric-label">2025 Actual</div>
                    <div class="metric-value" id="actual2025">$0</div>
                </div>
            </div>
        </div>
        <div class="col-lg">
            <div class="metric-card">
                <div class="metric-icon" id="varianceIcon">ðŸ“ˆ</div>
                <div class="metric-content">
                    <div class="metric-label">Plan Variance</div>
                    <div class="metric-value" id="variance">$0</div>
                    <div class="metric-change" id="variancePercent">0%</div>
                </div>
            </div>
        </div>
        <div class="col-lg">
            <div class="metric-card">
                <div class="metric-icon">âš¡</div>
                <div class="metric-content">
                    <div class="metric-label">YoY Growth</div>
                    <div class="metric-value" id="yoyGrowth">0%</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Error Alert -->
    <div id="errorAlert" class="alert alert-danger" style="display: none;">
        <span id="errorMessage"></span>
    </div>

    <!-- Loading State -->
    <div id="loadingState" class="dashboard-card text-center py-5">
        <div class="loading-spinner mb-3"></div>
        <div class="text-muted">Loading budget data...</div>
    </div>

    <!-- Budget Trend Chart -->
    <div id="chartContainer" class="dashboard-card mb-4" style="display: none;">
        <h3 class="chart-title">2024 Sales vs 2025 Plan vs 2025 Actual Trend</h3>
        <canvas id="budgetChart" width="100%" height="400"></canvas>
    </div>

    <!-- Location Performance -->
    <div id="locationContainer" class="row g-4" style="display: none;">
        <!-- Location Bar Chart -->
        <div class="col-lg-6">
            <div class="dashboard-card">
                <h3 class="chart-title">2025 Plan vs Actual by Location</h3>
                <canvas id="locationChart" width="100%" height="350"></canvas>
            </div>
        </div>
        
        <!-- Location Performance Table -->
        <div class="col-lg-6">
            <div class="dashboard-card">
                <h3 class="chart-title">Location Performance</h3>
                <div id="locationTable" class="location-performance">
                    <!-- Dynamic content -->
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.dashboard-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
}

.dashboard-card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    padding: 1.5rem;
    border: 1px solid #e5e7eb;
}

.dashboard-title {
    font-size: 1.75rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.5rem;
}

.metric-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    border: 1px solid #e5e7eb;
    display: flex;
    align-items: center;
    gap: 1rem;
    height: 100%;
}

.metric-icon {
    font-size: 2rem;
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 12px;
    color: white;
    flex-shrink: 0;
}

.metric-content {
    flex: 1;
}

.metric-label {
    font-size: 0.875rem;
    color: #6b7280;
    font-weight: 500;
    margin-bottom: 0.25rem;
}

.metric-value {
    font-size: 1.5rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.25rem;
}

.metric-change {
    font-size: 0.875rem;
    font-weight: 500;
}

.metric-change.positive { color: #16a34a; }
.metric-change.negative { color: #dc2626; }
.metric-change.neutral { color: #6b7280; }

.chart-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 1.5rem;
    text-align: center;
}

.loading-spinner {
    width: 2rem;
    height: 2rem;
    border: 2px solid #e5e7eb;
    border-radius: 50%;
    border-top-color: #0078d4;
    animation: spin 1s ease-in-out infinite;
    margin: 0 auto;
}

@@keyframes spin {
    to { transform: rotate(360deg); }
}

.location-performance {
    max-height: 400px;
    overflow-y: auto;
}

.location-item {
    display: flex;
    justify-content: between;
    align-items: center;
    padding: 0.75rem;
    margin-bottom: 0.5rem;
    background: #f8fafc;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
}

.location-rank {
    font-size: 0.875rem;
    font-weight: 600;
    color: #6b7280;
    width: 30px;
}

.location-name {
    font-size: 0.875rem;
    font-weight: 500;
    color: #1f2937;
    flex: 1;
    margin-left: 0.75rem;
}

.location-metrics {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.location-actual {
    font-size: 0.875rem;
    color: #6b7280;
}

.location-variance {
    font-size: 0.875rem;
    font-weight: 500;
    padding: 0.25rem 0.5rem;
    border-radius: 9999px;
}

.location-variance.positive {
    background-color: #dcfce7;
    color: #166534;
}

.location-variance.negative {
    background-color: #fee2e2;
    color: #991b1b;
}

.form-select-sm {
    font-size: 0.875rem;
}
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
let budgetChart = null;
let locationChart = null;
let currentLocation = 'all';
let currentPeriod = 'last4weeks';

document.addEventListener('DOMContentLoaded', function() {
    // Event listeners
    document.getElementById('locationSelect').addEventListener('change', function() {
        currentLocation = this.value;
        fetchBudgetData();
    });
    
    document.getElementById('periodSelect').addEventListener('change', function() {
        currentPeriod = this.value;
        fetchBudgetData();
    });
    
    // Initial load
    fetchLocations();
    fetchBudgetData();
});

async function fetchLocations() {
    try {
        const response = await fetch('/dev/api/Budget/locations');
        const data = await response.json();
        
        if (data.success && data.locations) {
            const locationSelect = document.getElementById('locationSelect');
            locationSelect.innerHTML = '<option value="all">All Locations</option>';
            
            data.locations.forEach(location => {
                const option = document.createElement('option');
                option.value = location;
                option.textContent = location;
                locationSelect.appendChild(option);
            });
        }
    } catch (error) {
        console.error('Error fetching locations:', error);
    }
}

async function fetchBudgetData() {
    try {
        showLoading(true);
        hideError();
        
        const params = new URLSearchParams({
            location: currentLocation,
            period: currentPeriod
        });
        
        const response = await fetch(`/dev/api/Budget?${params}`);
        const data = await response.json();
        
        if (data.success) {
            updateSummaryMetrics(data.summary);
            updateBudgetChart(data.chartData);
            updateLocationData(data.locationData);
            hideError();
        } else {
            showError(data.error || 'Failed to fetch budget data');
        }
    } catch (error) {
        console.error('Error fetching budget data:', error);
        showError('Error connecting to server');
    } finally {
        showLoading(false);
    }
}

function updateSummaryMetrics(summary) {
    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount);
    };
    
    document.getElementById('sales2024').textContent = formatCurrency(summary.total2024Sales);
    document.getElementById('plan2025').textContent = formatCurrency(summary.totalBudget);
    document.getElementById('actual2025').textContent = formatCurrency(summary.totalActual);
    document.getElementById('variance').textContent = formatCurrency(Math.abs(summary.variance));
    
    const variancePercent = document.getElementById('variancePercent');
    const varianceIcon = document.getElementById('varianceIcon');
    const varianceValue = summary.variancePercent;
    
    variancePercent.textContent = `${varianceValue >= 0 ? '+' : ''}${varianceValue.toFixed(1)}%`;
    variancePercent.className = `metric-change ${varianceValue >= 0 ? 'positive' : 'negative'}`;
    varianceIcon.textContent = varianceValue >= 0 ? 'ðŸ“ˆ' : 'ðŸ“‰';
    
    const yoyGrowth = document.getElementById('yoyGrowth');
    const yoyValue = summary.yearOverYearGrowth;
    yoyGrowth.textContent = `${yoyValue.toFixed(1)}%`;
    yoyGrowth.className = `metric-value ${yoyValue >= 0 ? 'positive' : 'negative'}`;
}

function updateBudgetChart(chartData) {
    const ctx = document.getElementById('budgetChart').getContext('2d');
    
    if (budgetChart) {
        budgetChart.destroy();
    }
    
    budgetChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: chartData.map(d => d.date),
            datasets: [
                {
                    label: '2024 Sales',
                    data: chartData.map(d => d.budget2024),
                    borderColor: '#f59e0b',
                    backgroundColor: 'rgba(245, 158, 11, 0.1)',
                    borderWidth: 2,
                    tension: 0.1
                },
                {
                    label: '2025 Plan',
                    data: chartData.map(d => d.budget2025),
                    borderColor: '#3b82f6',
                    backgroundColor: 'rgba(59, 130, 246, 0.1)',
                    borderWidth: 2,
                    tension: 0.1
                },
                {
                    label: '2025 Actual',
                    data: chartData.map(d => d.actual2025),
                    borderColor: '#10b981',
                    backgroundColor: 'rgba(16, 185, 129, 0.1)',
                    borderWidth: 2,
                    tension: 0.1
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'top'
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return '$' + value.toLocaleString();
                        }
                    }
                }
            }
        }
    });
    
    document.getElementById('chartContainer').style.display = 'block';
}

function updateLocationData(locationData) {
    if (locationData.length === 0) {
        document.getElementById('locationContainer').style.display = 'none';
        return;
    }
    
    // Update location bar chart
    const locationCtx = document.getElementById('locationChart').getContext('2d');
    
    if (locationChart) {
        locationChart.destroy();
    }
    
    locationChart = new Chart(locationCtx, {
        type: 'bar',
        data: {
            labels: locationData.map(l => l.location),
            datasets: [
                {
                    label: '2025 Plan',
                    data: locationData.map(l => l.budget),
                    backgroundColor: 'rgba(59, 130, 246, 0.6)',
                    borderColor: '#3b82f6',
                    borderWidth: 1
                },
                {
                    label: '2025 Actual',
                    data: locationData.map(l => l.actual),
                    backgroundColor: 'rgba(16, 185, 129, 0.6)',
                    borderColor: '#10b981',
                    borderWidth: 1
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'top'
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return '$' + value.toLocaleString();
                        }
                    }
                }
            }
        }
    });
    
    // Update location table
    const locationTable = document.getElementById('locationTable');
    locationTable.innerHTML = '';
    
    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount);
    };
    
    locationData.slice(0, 10).forEach((location, index) => {
        const item = document.createElement('div');
        item.className = 'location-item';
        
        const varianceClass = location.variancePercent >= 0 ? 'positive' : 'negative';
        
        item.innerHTML = `
            <div class="location-rank">#${index + 1}</div>
            <div class="location-name">${location.location}</div>
            <div class="location-metrics">
                <div class="location-actual">${formatCurrency(location.actual)}</div>
                <div class="location-variance ${varianceClass}">
                    ${location.variancePercent >= 0 ? '+' : ''}${location.variancePercent.toFixed(1)}%
                </div>
            </div>
        `;
        
        locationTable.appendChild(item);
    });
    
    document.getElementById('locationContainer').style.display = 'block';
}

function showLoading(show) {
    const loadingState = document.getElementById('loadingState');
    const chartContainer = document.getElementById('chartContainer');
    const locationContainer = document.getElementById('locationContainer');
    
    if (show) {
        loadingState.style.display = 'block';
        chartContainer.style.display = 'none';
        locationContainer.style.display = 'none';
    } else {
        loadingState.style.display = 'none';
    }
}

function showError(message) {
    const errorAlert = document.getElementById('errorAlert');
    const errorMessage = document.getElementById('errorMessage');
    
    errorMessage.textContent = message;
    errorAlert.style.display = 'block';
}

function hideError() {
    const errorAlert = document.getElementById('errorAlert');
    errorAlert.style.display = 'none';
}
</script>