@{
    ViewData["Title"] = "Store Rankings";
}

<div class="dashboard-container">
    <!-- Header -->
    <div class="mb-4">
        <h1 class="dashboard-title">üèÜ Store Rankings</h1>
        <p class="text-muted mb-2">Compare store performance and track rankings over time</p>
        <p class="text-info fw-medium">Store rankings are only included for stores where SoLink cameras are installed to get conversion data</p>
    </div>

    <!-- Filters -->
    <div class="dashboard-card mb-4">
        <div class="row g-3 align-items-end">
            <div class="col-lg-3">
                <label class="form-label fw-semibold">üìÖ Date Range</label>
                <div class="d-flex gap-2">
                    <input type="date" id="startDate" class="form-control form-control-sm">
                    <input type="date" id="endDate" class="form-control form-control-sm">
                </div>
            </div>
            <div class="col-lg-2">
                <label class="form-label fw-semibold">üë• Min Total Visitors</label>
                <input type="number" id="minVisitors" class="form-control form-control-sm" value="100" min="0">
            </div>
            <div class="col-lg-2">
                <label class="form-label fw-semibold">üì¶ Min Total Orders</label>
                <input type="number" id="minOrders" class="form-control form-control-sm" value="5" min="0">
            </div>
            <div class="col-lg-3">
                <button id="analyzePerformance" class="btn btn-primary btn-sm w-100">
                    <i class="fluent-icon">üîç</i> Analyze Performance
                </button>
            </div>
        </div>
    </div>

    <!-- Error Alert -->
    <div id="errorAlert" class="alert alert-danger" style="display: none;">
        <span id="errorMessage"></span>
    </div>

    <!-- Summary Metrics -->
    <div id="summaryCards" class="mb-4" style="display: none;">
        <div>
            <div class="metric-card">
                <div class="metric-icon">üè™</div>
                <div class="metric-content">
                    <div class="metric-label">Stores Analyzed</div>
                    <div class="metric-value" id="storesAnalyzed">0</div>
                </div>
            </div>
        </div>
        <div>
            <div class="metric-card">
                <div class="metric-icon">üìÖ</div>
                <div class="metric-content">
                    <div class="metric-label">Date Range</div>
                    <div class="metric-value" id="dateRange">0 days</div>
                </div>
            </div>
        </div>
        <div>
            <div class="metric-card">
                <div class="metric-icon">üë•</div>
                <div class="metric-content">
                    <div class="metric-label">Total Visitors</div>
                    <div class="metric-value" id="totalVisitors">0</div>
                </div>
            </div>
        </div>
        <div>
            <div class="metric-card">
                <div class="metric-icon">üí∞</div>
                <div class="metric-content">
                    <div class="metric-label">Total Revenue</div>
                    <div class="metric-value" id="totalRevenue">$0</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading State -->
    <div id="loadingState" class="dashboard-card text-center py-5" style="display: none;">
        <div class="loading-spinner mb-3"></div>
        <div class="text-muted">Loading store rankings...</div>
    </div>


    <!-- Store Performance Rankings -->
    <div id="overallRankings" class="dashboard-card mb-4" style="display: none;">
        <h3 class="chart-title">üèÜ Overall Store Rankings</h3>
        <div class="table-responsive">
            <table class="table table-hover">
                <thead class="table-light">
                    <tr>
                        <th>Rank</th>
                        <th>Store</th>
                        <th>Score</th>
                        <th>Visitors</th>
                        <th>Transactions</th>
                        <th>Conversion Rate</th>
                        <th>Revenue/Visitor</th>
                        <th>Total Revenue</th>
                    </tr>
                </thead>
                <tbody id="overallRankingsTable"></tbody>
            </table>
        </div>
    </div>

    <!-- Detailed Metrics Table -->
    <div id="detailedMetrics" class="dashboard-card" style="display: none;">
        <h3 class="chart-title">üìä Detailed Performance Metrics</h3>
        <div class="table-responsive">
            <table class="table table-hover">
                <thead class="table-light">
                    <tr>
                        <th>Store</th>
                        <th>Avg Transaction</th>
                        <th>Customers/Day</th>
                        <th>Revenue/Day</th>
                        <th>Transactions/Day</th>
                        <th>Conv Rank</th>
                        <th>Rev/Vis Rank</th>
                        <th>Total Rev Rank</th>
                        <th>Avg Trans Rank</th>
                    </tr>
                </thead>
                <tbody id="detailedMetricsTable"></tbody>
            </table>
        </div>
    </div>

    <!-- Help Text -->
    <div id="helpText" class="dashboard-card text-center py-5">
        <div style="font-size: 3rem; margin-bottom: 1rem;">üèÜ</div>
        <h3 class="mb-3">Select Date Range to Analyze Store Performance</h3>
        <p class="text-muted">Compare store efficiency using visitor conversion, revenue per visitor, and overall performance metrics</p>
    </div>
</div>

<style>
.dashboard-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
}

.dashboard-card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    padding: 1.5rem;
    border: 1px solid #e5e7eb;
}

.dashboard-title {
    font-size: 1.75rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.5rem;
}

.metric-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    border: 1px solid #e5e7eb;
    display: flex;
    align-items: center;
    gap: 1rem;
    height: 100%;
}

#summaryCards {
    display: grid !important;
    grid-template-columns: 1fr 1fr 1fr 1fr !important;
    gap: 1rem !important;
}

.metric-icon {
    font-size: 2rem;
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 12px;
    color: white;
    flex-shrink: 0;
}

.metric-content {
    flex: 1;
}

.metric-label {
    font-size: 0.875rem;
    color: #6b7280;
    font-weight: 500;
    margin-bottom: 0.25rem;
}

.metric-value {
    font-size: 1.5rem;
    font-weight: 600;
    color: #1f2937;
}

.chart-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 1.5rem;
    text-align: center;
}

.loading-spinner {
    width: 2rem;
    height: 2rem;
    border: 2px solid #e5e7eb;
    border-radius: 50%;
    border-top-color: #0078d4;
    animation: spin 1s ease-in-out infinite;
    margin: 0 auto;
}

@@keyframes spin {
    to { transform: rotate(360deg); }
}

.fluent-icon {
    margin-right: 0.25rem;
}

.table th {
    font-weight: 600;
    font-size: 0.875rem;
    color: #6b7280;
    text-transform: uppercase;
    letter-spacing: 0.05em;
}

.rank-icon {
    font-size: 1.25rem;
    margin-right: 0.5rem;
}

.rank-1 { background-color: #fff9c4; }
.rank-2 { background-color: #f3f4f6; }  
.rank-3 { background-color: #fed7aa; }

.rank-blue { color: #2563eb; font-weight: 600; }
.rank-green { color: #16a34a; font-weight: 600; }
.rank-purple { color: #9333ea; font-weight: 600; }
.rank-orange { color: #ea580c; font-weight: 600; }
</style>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
let rankingsChart = null;
let rankingsData = null;

document.addEventListener('DOMContentLoaded', function() {
    // Set default date range (last 7 days)
    const today = new Date();
    const lastWeek = new Date(today);
    lastWeek.setDate(lastWeek.getDate() - 7);
    
    document.getElementById('startDate').value = lastWeek.toISOString().split('T')[0];
    document.getElementById('endDate').value = today.toISOString().split('T')[0];
    
    // Event listeners
    document.getElementById('analyzePerformance').addEventListener('click', fetchRankingsData);
});

async function fetchRankingsData() {
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    const minVisitors = parseInt(document.getElementById('minVisitors').value) || 100;
    const minOrders = parseInt(document.getElementById('minOrders').value) || 5;
    
    if (!startDate || !endDate) {
        showError('Please select both start and end dates');
        return;
    }
    
    try {
        showLoading(true);
        hideError();
        hideHelpText();
        
        const params = new URLSearchParams({
            startDate: startDate,
            endDate: endDate,
            minVisitors: minVisitors.toString(),
            minOrders: minOrders.toString()
        });
        
        const response = await fetch(`/dev/api/Rankings?${params}`);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        
        if (data.success) {
            rankingsData = data;
            updateSummaryCards(data.summary);
            updateOverallRankings(data.rankings);
            updateDetailedMetrics(data.rankings);
            hideError();
        } else {
            showError(data.error || 'Failed to fetch rankings data');
        }
    } catch (error) {
        console.error('Error fetching rankings data:', error);
        showError('Error: ' + error.message);
    } finally {
        showLoading(false);
    }
}

function updateSummaryCards(summary) {
    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount);
    };
    
    document.getElementById('storesAnalyzed').textContent = summary.totalStores.toString();
    document.getElementById('dateRange').textContent = `${summary.dateRangeDays} days`;
    document.getElementById('totalVisitors').textContent = summary.totalVisitors.toLocaleString();
    document.getElementById('totalRevenue').textContent = formatCurrency(summary.totalRevenue);
    
    document.getElementById('summaryCards').style.visibility = 'visible';
}


function updateOverallRankings(rankings) {
    const tbody = document.getElementById('overallRankingsTable');
    tbody.innerHTML = '';
    
    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount);
    };
    
    const getRankIcon = (rank) => {
        switch (rank) {
            case 1: return '<span class="rank-icon">üèÜ</span>';
            case 2: return '<span class="rank-icon">ü•à</span>';
            case 3: return '<span class="rank-icon">ü•â</span>';
            default: return `<span class="rank-icon">#${rank}</span>`;
        }
    };
    
    rankings.forEach((store, index) => {
        const row = document.createElement('tr');
        row.className = `rank-${Math.min(index + 1, 3)}`;
        
        row.innerHTML = `
            <td>${getRankIcon(index + 1)}</td>
            <td class="fw-medium">${store.location}</td>
            <td class="fw-bold text-primary">${store.efficiencyScore.toFixed(2)}</td>
            <td>${store.visitors.toLocaleString()}</td>
            <td>${store.transactions.toLocaleString()}</td>
            <td>${(store.conversionRate * 100).toFixed(2)}%</td>
            <td>${formatCurrency(store.revenuePerVisitor)}</td>
            <td class="fw-semibold text-success">${formatCurrency(store.revenue)}</td>
        `;
        
        tbody.appendChild(row);
    });
    
    document.getElementById('overallRankings').style.display = 'block';
}

function updateDetailedMetrics(rankings) {
    const tbody = document.getElementById('detailedMetricsTable');
    tbody.innerHTML = '';
    
    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount);
    };
    
    rankings.forEach((store) => {
        const row = document.createElement('tr');
        
        row.innerHTML = `
            <td class="fw-medium">${store.location}</td>
            <td>${formatCurrency(store.avgTransactionValue)}</td>
            <td>${store.customersPerDay.toFixed(1)}</td>
            <td>${formatCurrency(store.revenuePerDay)}</td>
            <td>${store.transactionsPerDay.toFixed(1)}</td>
            <td class="rank-blue">#${store.conversionRank}</td>
            <td class="rank-green">#${store.revenuePerVisitorRank}</td>
            <td class="rank-purple">#${store.totalRevenueRank}</td>
            <td class="rank-orange">#${store.avgTransactionRank}</td>
        `;
        
        tbody.appendChild(row);
    });
    
    document.getElementById('detailedMetrics').style.display = 'block';
}

function showLoading(show) {
    document.getElementById('loadingState').style.display = show ? 'block' : 'none';
    
    if (!show && rankingsData) {
        document.getElementById('summaryCards').style.display = 'grid';
        document.getElementById('overallRankings').style.display = 'block';
        document.getElementById('detailedMetrics').style.display = 'block';
    }
}

function showError(message) {
    const errorAlert = document.getElementById('errorAlert');
    const errorMessage = document.getElementById('errorMessage');
    
    errorMessage.textContent = message;
    errorAlert.style.display = 'block';
}

function hideError() {
    const errorAlert = document.getElementById('errorAlert');
    errorAlert.style.display = 'none';
}

function hideHelpText() {
    document.getElementById('helpText').style.display = 'none';
}

// Initialize the page
document.addEventListener('DOMContentLoaded', function() {
    // Set default date range (last 7 days)
    const endDate = new Date();
    const startDate = new Date(endDate);
    startDate.setDate(startDate.getDate() - 6);
    
    document.getElementById('startDate').value = startDate.toISOString().split('T')[0];
    document.getElementById('endDate').value = endDate.toISOString().split('T')[0];
    
    // Add event listener for the analyze button
    document.getElementById('analyzePerformance').addEventListener('click', function() {
        loadRankingsData();
    });
    
    // Load initial data
    loadRankingsData();
});

async function loadRankingsData() {
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    const minVisitors = document.getElementById('minVisitors').value || 100;
    const minOrders = document.getElementById('minOrders').value || 5;
    
    if (!startDate || !endDate) {
        showError('Please select both start and end dates');
        return;
    }
    
    hideError();
    showLoading(true);
    
    try {
        const params = new URLSearchParams({
            startDate: startDate,
            endDate: endDate,
            minVisitors: minVisitors,
            minOrders: minOrders
        });
        
        const response = await fetch(`/dev/api/Rankings?${params}`);
        const data = await response.json();
        
        if (response.ok) {
            rankingsData = data;
            updateSummaryCards(data.summary);
            updateOverallRankings(data.rankings);
            updateDetailedMetrics(data.rankings);
            showLoading(false);
        } else {
            throw new Error(data.error || 'Failed to load rankings data');
        }
    } catch (error) {
        console.error('Error loading rankings data:', error);
        showError('Failed to load rankings data: ' + error.message);
        showLoading(false);
    }
}
</script>