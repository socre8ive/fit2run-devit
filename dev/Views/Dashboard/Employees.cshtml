@{
    ViewData["Title"] = "Employee Analytics";
}

<div class="dashboard-container">
    <!-- Header -->
    <div class="mb-4">
        <h1 class="dashboard-title">üë• Employee Analytics</h1>
        <p class="text-muted">Comprehensive employee performance and productivity insights</p>
    </div>

    <!-- Filters -->
    <div class="dashboard-card mb-4">
        <div class="row g-3 align-items-end">
            <div class="col-lg-4">
                <label class="form-label fw-semibold">Date Range</label>
                <div class="d-flex gap-2">
                    <input type="date" id="startDate" class="form-control form-control-sm">
                    <input type="date" id="endDate" class="form-control form-control-sm">
                </div>
            </div>
            <div class="col-lg-4">
                <label class="form-label fw-semibold">Location</label>
                <select id="locationSelect" class="form-select form-select-sm">
                    <option value="all">All Locations</option>
                </select>
            </div>
            <div class="col-lg-4">
                <button id="applyFilters" class="btn btn-primary btn-sm">
                    <i class="fluent-icon">üîç</i> Apply Filters
                </button>
            </div>
        </div>
    </div>

    <!-- Error Alert -->
    <div id="errorAlert" class="alert alert-danger" style="display: none;">
        <span id="errorMessage"></span>
    </div>

    <!-- Summary Cards -->
    <div id="summaryCards" class="row g-4 mb-4" style="display: none;">
        <div class="col-lg-3 col-md-6">
            <div class="metric-card">
                <div class="metric-icon">üë•</div>
                <div class="metric-content">
                    <div class="metric-label">Total Employees</div>
                    <div class="metric-value" id="totalEmployees">0</div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="metric-card">
                <div class="metric-icon">üèÜ</div>
                <div class="metric-content">
                    <div class="metric-label">Top Performer</div>
                    <div class="metric-value" id="topPerformer">N/A</div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="metric-card">
                <div class="metric-icon">üí∞</div>
                <div class="metric-content">
                    <div class="metric-label">Total Revenue</div>
                    <div class="metric-value" id="totalRevenue">$0</div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="metric-card">
                <div class="metric-icon">üìà</div>
                <div class="metric-content">
                    <div class="metric-label">Avg Revenue/Employee</div>
                    <div class="metric-value" id="avgRevenue">$0</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading State -->
    <div id="loadingState" class="dashboard-card text-center py-5" style="display: none;">
        <div class="loading-spinner mb-3"></div>
        <div class="text-muted">Loading employee data...</div>
    </div>

    <!-- Performance Tabs -->
    <div id="performanceTabs" class="dashboard-card mb-4" style="display: none;">
        <div class="mb-4">
            <h3 class="chart-title">Employee Performance Rankings</h3>
            
            <!-- Tab Navigation -->
            <div class="nav nav-tabs mb-3">
                <button id="revenueTab" class="nav-link active" onclick="switchTab('revenue')">
                    üí∞ Revenue Leaders
                </button>
                <button id="transactionsTab" class="nav-link" onclick="switchTab('transactions')">
                    üìä Transaction Volume
                </button>
            </div>
        </div>

        <!-- Tab Content -->
        <div id="revenueTabContent" class="tab-content">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>Rank</th>
                            <th>Employee</th>
                            <th>Total Revenue</th>
                            <th>Revenue/Day</th>
                            <th>Days Worked</th>
                        </tr>
                    </thead>
                    <tbody id="revenueLeadersTable"></tbody>
                </table>
            </div>
        </div>

        <div id="transactionsTabContent" class="tab-content" style="display: none;">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>Rank</th>
                            <th>Employee</th>
                            <th>Total Transactions</th>
                            <th>Trans/Day</th>
                            <th>Avg Transaction</th>
                        </tr>
                    </thead>
                    <tbody id="transactionLeadersTable"></tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- All Employees Table -->
    <div id="allEmployeesTable" class="dashboard-card" style="display: none;">
        <h3 class="chart-title">üìã Complete Employee Rankings</h3>
        <div class="table-responsive">
            <table class="table table-hover">
                <thead class="table-light">
                    <tr>
                        <th>Rank</th>
                        <th>Employee</th>
                        <th>Revenue</th>
                        <th>Revenue/Day</th>
                        <th>Transactions</th>
                        <th>Trans/Day</th>
                        <th>Customers</th>
                    </tr>
                </thead>
                <tbody id="allEmployeesTableBody"></tbody>
            </table>
        </div>
    </div>

    <!-- Help Text -->
    <div id="helpText" class="dashboard-card text-center py-5">
        <div class="text-center">
            <div style="font-size: 3rem; margin-bottom: 1rem;">üë•</div>
            <h3 class="mb-3">Select Date Range to Analyze Employee Performance</h3>
            <p class="text-muted">Choose a start and end date to view comprehensive employee analytics and performance metrics</p>
        </div>
    </div>
</div>

<style>
.dashboard-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
}

.dashboard-card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    padding: 1.5rem;
    border: 1px solid #e5e7eb;
}

.dashboard-title {
    font-size: 1.75rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.5rem;
}

.metric-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    border: 1px solid #e5e7eb;
    display: flex;
    align-items: center;
    gap: 1rem;
    height: 100%;
}

.metric-icon {
    font-size: 2rem;
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 12px;
    color: white;
    flex-shrink: 0;
}

.metric-content {
    flex: 1;
}

.metric-label {
    font-size: 0.875rem;
    color: #6b7280;
    font-weight: 500;
    margin-bottom: 0.25rem;
}

.metric-value {
    font-size: 1.5rem;
    font-weight: 600;
    color: #1f2937;
}

.chart-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 1.5rem;
}

.loading-spinner {
    width: 2rem;
    height: 2rem;
    border: 2px solid #e5e7eb;
    border-radius: 50%;
    border-top-color: #0078d4;
    animation: spin 1s ease-in-out infinite;
    margin: 0 auto;
}

@@keyframes spin {
    to { transform: rotate(360deg); }
}

.fluent-icon {
    margin-right: 0.25rem;
}

.nav-tabs {
    border-bottom: 2px solid #e5e7eb;
}

.nav-link {
    background: none;
    border: none;
    padding: 0.75rem 1.5rem;
    color: #6b7280;
    font-weight: 500;
    cursor: pointer;
    border-bottom: 2px solid transparent;
    transition: all 0.2s;
}

.nav-link.active {
    color: #0078d4;
    border-bottom-color: #0078d4;
    background-color: #f0f9ff;
}

.nav-link:hover {
    color: #374151;
}

.table th {
    font-weight: 600;
    font-size: 0.875rem;
    color: #6b7280;
    text-transform: uppercase;
    letter-spacing: 0.05em;
}

.rank-1 { background-color: #fef3c7; }
.rank-2 { background-color: #f3f4f6; }
.rank-3 { background-color: #fde68a; }
</style>

<script>
let currentTab = 'revenue';
let employeeData = null;

document.addEventListener('DOMContentLoaded', function() {
    // Set default date range (last 7 days)
    const today = new Date();
    const lastWeek = new Date(today);
    lastWeek.setDate(lastWeek.getDate() - 7);
    
    document.getElementById('startDate').value = lastWeek.toISOString().split('T')[0];
    document.getElementById('endDate').value = today.toISOString().split('T')[0];
    
    // Load locations
    fetchLocations();
    
    // Event listeners
    document.getElementById('applyFilters').addEventListener('click', fetchEmployeeData);
});

async function fetchLocations() {
    try {
        const response = await fetch('/dev/api/Employees/locations');
        const data = await response.json();
        
        if (data.success && data.locations) {
            const locationSelect = document.getElementById('locationSelect');
            locationSelect.innerHTML = '';
            
            data.locations.forEach(location => {
                const option = document.createElement('option');
                option.value = location;
                
                if (location === 'all') option.textContent = 'All Locations';
                else if (location === 'all_stores') option.textContent = 'All Stores - Ecom';
                else if (location === 'ecom') option.textContent = 'Ecom';
                else option.textContent = location;
                
                locationSelect.appendChild(option);
            });
        }
    } catch (error) {
        console.error('Error fetching locations:', error);
    }
}

async function fetchEmployeeData() {
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    const location = document.getElementById('locationSelect').value;
    
    if (!startDate || !endDate) {
        showError('Please select both start and end dates');
        return;
    }
    
    try {
        showLoading(true);
        hideError();
        hideHelpText();
        
        const params = new URLSearchParams({
            startDate: startDate,
            endDate: endDate,
            location: location
        });
        
        const response = await fetch(`/dev/api/Employees?${params}`);
        const data = await response.json();
        
        if (data.success) {
            employeeData = data;
            updateSummaryCards(data.summary);
            updatePerformanceTabs(data.performanceTabs);
            updateAllEmployeesTable(data.allEmployees);
            hideError();
        } else {
            showError(data.error || 'Failed to fetch employee data');
        }
    } catch (error) {
        console.error('Error fetching employee data:', error);
        showError('Error connecting to server');
    } finally {
        showLoading(false);
    }
}

function updateSummaryCards(summary) {
    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount);
    };
    
    document.getElementById('totalEmployees').textContent = summary.totalEmployees.toLocaleString();
    document.getElementById('topPerformer').textContent = summary.bestPerformer.name;
    document.getElementById('totalRevenue').textContent = formatCurrency(summary.totalRevenue);
    document.getElementById('avgRevenue').textContent = formatCurrency(summary.avgRevenuePerEmployee);
    
    document.getElementById('summaryCards').style.display = 'block';
}

function updatePerformanceTabs(performanceTabs) {
    updateRevenueLeadersTable(performanceTabs.revenueLeaders);
    updateTransactionLeadersTable(performanceTabs.transactionLeaders);
    
    document.getElementById('performanceTabs').style.display = 'block';
}

function updateRevenueLeadersTable(revenueLeaders) {
    const tbody = document.getElementById('revenueLeadersTable');
    tbody.innerHTML = '';
    
    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount);
    };
    
    revenueLeaders.forEach((employee, index) => {
        const row = document.createElement('tr');
        row.className = `rank-${Math.min(index + 1, 3)}`;
        
        row.innerHTML = `
            <td class="fw-bold">${employee.rank}</td>
            <td>${employee.name}</td>
            <td>${formatCurrency(employee.revenue)}</td>
            <td>${formatCurrency(employee.revenuePerDay)}</td>
            <td>${employee.daysWorked}</td>
        `;
        
        tbody.appendChild(row);
    });
}

function updateTransactionLeadersTable(transactionLeaders) {
    const tbody = document.getElementById('transactionLeadersTable');
    tbody.innerHTML = '';
    
    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount);
    };
    
    transactionLeaders.forEach((employee, index) => {
        const row = document.createElement('tr');
        row.className = `rank-${Math.min(index + 1, 3)}`;
        
        row.innerHTML = `
            <td class="fw-bold">${employee.rank}</td>
            <td>${employee.name}</td>
            <td>${employee.totalTransactions}</td>
            <td>${employee.transactionsPerDay.toFixed(1)}</td>
            <td>${formatCurrency(employee.avgTransactionValue)}</td>
        `;
        
        tbody.appendChild(row);
    });
}

function updateAllEmployeesTable(allEmployees) {
    const tbody = document.getElementById('allEmployeesTableBody');
    tbody.innerHTML = '';
    
    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount);
    };
    
    allEmployees.forEach((employee, index) => {
        const row = document.createElement('tr');
        row.className = `rank-${Math.min(index + 1, 3)}`;
        
        row.innerHTML = `
            <td class="fw-bold">${employee.rank}</td>
            <td>${employee.name}</td>
            <td>${formatCurrency(employee.revenue)}</td>
            <td>${formatCurrency(employee.revenuePerDay)}</td>
            <td>${employee.totalTransactions}</td>
            <td>${employee.transactionsPerDay.toFixed(1)}</td>
            <td>${employee.uniqueCustomers}</td>
        `;
        
        tbody.appendChild(row);
    });
    
    document.getElementById('allEmployeesTable').style.display = 'block';
}

function switchTab(tab) {
    currentTab = tab;
    
    // Update tab buttons
    document.getElementById('revenueTab').classList.toggle('active', tab === 'revenue');
    document.getElementById('transactionsTab').classList.toggle('active', tab === 'transactions');
    
    // Update tab content
    document.getElementById('revenueTabContent').style.display = tab === 'revenue' ? 'block' : 'none';
    document.getElementById('transactionsTabContent').style.display = tab === 'transactions' ? 'block' : 'none';
}

function showLoading(show) {
    document.getElementById('loadingState').style.display = show ? 'block' : 'none';
    
    if (!show && employeeData) {
        document.getElementById('summaryCards').style.display = 'block';
        document.getElementById('performanceTabs').style.display = 'block';
        document.getElementById('allEmployeesTable').style.display = 'block';
    }
}

function showError(message) {
    const errorAlert = document.getElementById('errorAlert');
    const errorMessage = document.getElementById('errorMessage');
    
    errorMessage.textContent = message;
    errorAlert.style.display = 'block';
}

function hideError() {
    const errorAlert = document.getElementById('errorAlert');
    errorAlert.style.display = 'none';
}

function hideHelpText() {
    document.getElementById('helpText').style.display = 'none';
}
</script>